use std::cmp::max;
use std::collections::{HashMap, HashSet};

const WIDTH: usize = 7;

fn coords(shape: &Vec<(usize, usize)>, origin: (usize, usize)) -> Vec<(usize, usize)> {
    shape.iter().map(|(x, y)| (origin.0 + x, origin.1 + y)).collect()
}

fn collides(grid: &HashSet<(usize, usize)>, shape: &Vec<(usize, usize)>, origin: (usize, usize)) -> bool {
    let cs = coords(shape, origin);
    cs.into_iter().filter(|c| grid.contains(c)).count() > 0
}

fn draw(grid: &HashSet<(usize, usize)>, shape: Option<&Vec<(usize, usize)>>, active: Option<(usize, usize)>) {
    let a = match active {
        Some(origin) => {
            let cs = coords(shape.unwrap(), origin);
            HashSet::from_iter(cs.into_iter())
        },
        None => HashSet::new()
    };

    let mut all = grid.clone();
    all.extend(a.iter());

    let height = match all.iter().map(|(_, y)| y).max() {
        Some(h) => *h,
        _ => 0,
    } + 3;

    let mut drawing = String::from("+-------+");
    for y in 0..height {
        let mut line = String::from("");
        for x in 0..WIDTH {
            let c = (x, y);
            if grid.contains(&c) {
                line.push('#')
            } else if a.contains(&c) {
                line.push('@');
            } else {
                line.push(' ');
            }
        }
        drawing = format!("|{}|\n{}", line, drawing);
    }
    println!("{}", drawing);
}

fn aap() {
    let instructions = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
    // let instructions = ">>>><<<<>>>><>>>><<<>><<<>>><<><<>>><<>>><<<>>>><>><<<<><<<>>><<><<>><>>>><<><<>><<<<>>>><<<<>><><>><<>>><<<>><<<><<<>><<<<><<><>>><>><<<><><<<<>>>><<<>>>><<>><<<<><<<<><<<<>>><>>><>>><>>>><<<>>><>>><<<>><<<>>>><<<>>><<>><<<<>>>><<<>>>><<>>>><<>>>><<>><<<>><>>>><<><<<<>>><>><>><<><<<>>>><<<><>><<<<>><>>>><<>>>><<<><>>><<<<>><<><>>>><<>>>><<<>><<<>>><<><>>><<<>>>><<>>>><><<<<>><>>>><<<<><><<<>>>><>>>><<<><<<><<<<><<>><>><><<<>>>><<<<><<<<><<<<>>>><<<<><<>>><<<><<<>>>><<<>><>>>><<<>>>><><>>><<>>><<<>><>>>><<>>>><>>>><<<<>>>><<<<>>><<<<>>><<<<>>>><<<>>>><<><<>>>><<<>><<<<>>>><<><<<><>>>><<<<><>><<<>>>><<<<><<<><<>>><<<>>>><>>><<<<>>>><<<>>><<>>>><<<<>><<<>>><<<<>>><<><<>><<><<<<>><<><<>>><<>>><<>>>><>><>>><<<<>>><<<>>>><<<><<<<>><<<<>>>><<<>><<<<><<<<>>><<<<>>><<><<>><<<>>><<<<>>><>>>><<><<>>><<<>>><<>>><<<>><<<>><<<>>><<<<>>>><<><<>>><<><<<>>>><<<<>>>><>>>><<<><><>><<<>>><<>><<<><<>>>><>><<<<>>>><<<><<>><><<<<>>><<>>><>><>><<<<>>>><<>>>><<<<>>>><<<<>>>><>><<>>><<>><<><>>><<<<><><<>>><>>>><<<<><<>>>><<<><>><<>>><<<><<>><><<<<>>><>>>><>>>><<<>>>><<>>>><<<><><>><<>>>><<<>>><<<>>>><<><<>><<<<>><<<>>><<<<>><>>>><<>>><>>>><<>>><<<<>>><>>>><>><<<<><<<>>><<<<>><<<<>><<>>><<<>><>>>><>>><<<<>><>><<<><<<>><<>>><>>>><<><<<<>><<<<>><>>><<<<><<<>>><<<>>><<<<>><<<>>><>>>><<<<>>>><<>>>><<><<>>>><<<<>>><<<<>>><<>>><<><<<<>>>><<>><<<>><>><>><<><<><<<><<<<>><<>>><<<<>><<<><<<<><><<><<<<>>><><<<<>><<<>><>>>><<><<<>>>><<<><<<><>>>><<>>><<<<><>>><<<<>><<<<>><<<>>><<<<>><>><<<<><>>><<<>><>><<>>>><<>>>><<<<><<<><<>>>><<<<>><<<<><<<<>>>><<<<>>><<<<>><<<>><<>>><<<<>><<<<>><<>>><<>>>><<<<>>>><<<>>><<>><<<<>>><>><<>><><<>><<<<>>><<<<><>>><<>>><>>><<><<<>>><<<<>>><<<<>><<><<<<>><>>>><>>>><<<<>><>><<<<>>>><<>>>><<><<>>>><<>>><<<><<<>>><<<>>><<<<><<><<<<>><<<>><<<<>>>><<<>>>><<>>><>>>><>>>><<<<>>>><<<>>>><<><<<<>>>><<>><<<<><<<>><<>>>><<<>><>>><>><>>>><<>>><><>><>><<>>><>><<<>>>><<<>><>>><<<>><<<>>><<>><<<<><<><>><>>><<>><>><<>>><>><<<>>>><<>><>><<<<><<<<>><<>><<<><<<<>>><>>><<<<><<>>>><<>><<<<><<>><<<>>>><<<>>><<>>><<<>>>><<><<<>><<>><><<<<>>>><<<<>><<>>><<><<<>>><<>>>><<<>>><<<>>><<>>><<<<>>><<<>>>><<<<>>><<<>>>><><>><>><<<><>><<>>>><<<>><<<<>>><<<><>>><<<<>>><<<<><<<>>>><<<>><<<<>><<<<><<>>><<<<>>><<<>><<><<<><<>>><>>>><>><<<<>><<<<><<<<>><<<<>>><<<>>><<>><<>>><<<><<<><<>>><<>>><<>>>><>>>><>>><<<<>>><<<<>>><<>>><<><<>>>><>><<>>>><>><>>>><<<><>><<>>><>>>><<<>>>><<>><>>>><>>><<><>><>><<>>>><<<>>>><>>><<<<>>><<>>><>>><<<>>>><<<<>>>><<>>><>><<<<><><<>>><<<>>><<>>><<<><>><<>>><<><>>><<>><<><>>><>>><<<><<<<><<<<>><><><<<<>>><<<>>>><<<<>>><<>>><>>><<><>>><>><>><<<<>><<<>><<<<>>>><<>>>><<<<>>><>>>><<<>>><>>>><<<<><<<<>>><><<<<>>><<><<>><<<>>><<><<<<><<<><>>>><>>><><<<>>>><<<<>>><<<<><<>>>><<><<>>><>><<<>>><<<>>><<<<>>>><<>>>><><><<<<>>><><<<><>>><<>><<<>><>>>><<<<>>>><<<><<><<><<<<>><<>>><><<>><<<>>>><<<<>>>><<<>>>><<<>><<<>>><<>><><>>><<<><<<>>>><<<<><>>><>>>><<<<>>><<<>>><<<>>><<>><>><<<>>><><>><<<<>>><<<>>>><<<>>><<<>><<<<>><<<<>>>><<<<>>>><<<>>>><<<<>>><<<<>>>><<<>>><<<>><<<>><>>>><<>><>><<<<>><<<<><><<<><<<<>>><>><<<>>><><<><>><<<>><<<<>><<<<>><>>>><<<><<<<>>><<<>>><<<<><<<>>>><<<<>>>><<>>>><<<>><<<<><>><<>>><<<><<<<>><<>><<<>>>><<>>>><<<><>>><>><<>>><<>>>><<>><<<<>>>><<<>>><<>>><<<<>><><<>>><<<<>>><<>><<<><<<<>><<<<>><<<><<>><<>>><<>><>>>><<<>><<<>>><<<>>><<<><><<><<<<>>>><<>>>><<<<><><<>>><<>><>>><>>>><>><>>><<<<>>><>><>>><<<<><<<><>>>><>>>><<<><<>>>><<<><<<<><<<>>>><<<<><<<>><<>><<<>>><>><<<><<<><<<>>>><<>><<<<><>><><>>>><<>>><><<<>>>><<>>><<<<><<<>>><<<<><<<<>><>>>><<>>><<>>>><<<>>><>><>>><<><><<>>><<<>>><<<>>>><<<>>><<<<>>><<<<><<<<>>>><<<<><>>><<<<>>>><<>><>>><<<><<>><>>>><<<<>>>><><<>><<<>>><>>>><>><<<<>>>><>><<<<>>><<<><<<>><<<><>>><<><<<>>><<<><<<<>>>><<<<>>><>>><><<><>><<>>><<><<<<>><>>>><<<<><>>><<>>>><<<<>><<>><<<><<<<>><<>>>><<>><<<<><<<<>><<<<>>>><<>>><<<<><><<<>>>><<<><<<<><>>><<>><<<<>>><<<<>>>><<<<>>>><<<>>>><><<<<>>>><><<<<>>><<<>>>><<<<>>><<>>>><<<<>>><>><><<<<>>>><<<<>>>><<><<>>><<<>><><<<>>>><<<<>><>>>><<<><<>>><<><<><>>><<>>>><<<>>><<<>>>><>>>><<<<>>>><<>><<>>>><<<>>><<<><<<><<>>><>>>><<>>>><><>><<<><<>><<>>>><>><<<>><<<<>>>><>><>>><<<>>><<<>><<>>>><<<>><><<<><>><<<>>>><<<<>>>><<>>><<>>><>>><><<<>><<<>><<<><<<<>><<>><<<>>>><<<>>>><<<>>><<>>>><<<>>><<<>><<>>><<<>>>><<<>>><><<<<>>><<<>><>>><><<<>>>><><<<>>><<<<>>><<>>>><<>>><<><<<<>><<<<><<>>>><<>>><><<<<><>>><<<<>><<<>><><<<><>>>><<<<>>><><<>>>><<>>><<<>><>>>><>>><<<><<><>><<<>>><>>><<<<>>>><>>><<<>>>><<<>>>><><<<><<<<>><<>>>><<<>><<<>>>><<>>><<<>>><<<<>><<<>>>><>>><<<>><<<<><<<>>>><<><<><<<<>>>><>>><>>><<<>>><>><<><<<<>><<>>>><<<<>>>><<<><<<>><<><<><<>>>><><<>>>><<<>>>><<><<<<>><<>><<<>>>><<>>><<<<>>><<<<>><<><<<>>><<<>><<<<>><<<<>>>><<>>><<<<>>><<>>>><>>><<>><<<><>>>><<>>><<><<>>><<<>>>><<>>>><<<<><<>><<<<>>><<<><<<>><<<<>><<<>><>>>><>>><<>>>><>>>><<<><<>>><<<<>>>><<<>><<<>>>><<><<<>>><<>>><<<>><<>>><>>>><<><<<>><<>>><<>>>><<>><<<<>><>>><>>><>>><<>>><<>>><<<<><<<<>>><<<<><<>>><<<>>><<<<>>>><<<>>><>>><<>>><>><<<<>>>><<<>><<<>>>><><<>><>>><>><>><<>>>><<<<>>><<<<>><<><<>>>><<>><<><<<>>>><<<><<<<>>>><<>>>><>><<>>>><<<>>><>>><<>>>><<>>>><<<<>>><>><<<>>>><<<<>><<>>><>>><<<<>>>><>>>><<<<><<<>>><>>>><>>><<>><<<<>><>><<<><<<<><<>>><<<<>>>><<<<>><>>>><<<>><<<<><<><<>>>><<<<>>><<><<<>>>><<<><>>><<<>>>><<>><<<><><<<><<>>>><>><<<>><<<>>>><<<<><>><<>><<<>>>><<><>>><>>>><<<>><<<>><<<>><><>>><<><<>>>><>>>><><<<>>>><<<>>><>>><<<<>>><<<>>><<>><<><<>><<<<><<<<>>><>>><<>>>><<<<>>><>>>><<<>>>><<<>>><<<<>>><<<>>>><<<>><>><<<<>>><<<>>><<<>>><<<>>>><<<<>>>><<<<>>><<<>>><<<><<<<>>><<>>><<>>>><<<>>><><<<>>><<<>>><<<>><>>>><<<>><<<>><<<<>>><<<<>><>><>>>><>>><<<<><<<>>><<<>>><<>><<<>>>><<<><<>>>><<<<><<>>><<<>>>><<<<>>><><<<<><<>>>><>>>><<>>><><>><>>>><<<<>>><<<<>><<<<><>>><<><<<<><>>>><>>><<><>>><<<>>>><<<<><<<<>>><<<<><<<<>>><<<<>>><<<<>>>><><<<<>>><<<><<<>>>><<<<>>>><<>><<<>><<<><<>>><<>><<><<><<<<>>>><<<<>>><<<<><<<<><<>>><<<<><<<<>>><>><<<>>><<<<>>><<<<><>>>><<<>><<<<><<<><>>>><>>><<<>><>>><<>>>><<>>><<<<>>>><<<<>>><<>><<>>><<<>><<<<><<>><<<>>><<<>><<<>><<><><<<<>>><<>><<><>>>><<<<>>>><<<>>><<<><<>>>><<<>>><<>><>>><<>><<<<>>>><>>><>>>><<<>>>><><>>><<<>><<<<>>>><<<<>><<>>><<<<><<>>>><<<<>><<<<><<><<>>>><<<>>><<<<>>>><<<<><>>>><<<<>><<>><>><<<>><<<<>>><<<>>><>>><>>>><<<>>>><<<<><<<<>>>><<<>>>><<<>>>><<>>><>>><<<>>><<>>>><<<<>>><>>><<>><<<>>>><<<><<>>><<<<>>><<<<>><<<><<<>><<<<>>><<<><<<<>>>><>>>><<>><<<<>>><><<<<>><<<<>><<<>>>><><>>><>>>><<<<>><<<>>><>>><<<>>>><<<>><<<<>>><<><<><<<<>>><>>>><<<>><>><<<<>>>><<<><<<<>>><<<><<>>>><<<<>>><<<<>>>><<<<>>>><><<>>><<>>>><<>>>><<>>>><<<<>><<<>>><>>><<<<><<>><<<><<<>>><>>>><<<>><>><<<>><<>>><<<<>><>><<<<>>><<>>><<<<>>><<<<>><<<>><><<<>><<<<>>>><<<<>>>><<<>>>><<>>>><<<<>>>><<<>>><<>><<<>><<>><<>>>><<<<>>><><<<>>>><<>><>><<<<><>><>>>><<><<<<>><<<<>><>>>><<<>><<<>>>><<<<>>><<<>>><<<<>><<<><<>><<<>>>><<<<><<<>><<<>>>><>><<>><>>>><<>>>><<<<>>><>>>><<>>>><<>><<<>><>><<<<>>>><<<<>>>><<<<>><<<<>>><<<>>><<<>>><<<>>>><<<><>>>><><<<><>><<<<>><>>><<>>><>>>><<<<>>>><<<><>>>><<<>><<<<>>><<><<<<>><<<>><>><<<>><>>>><<<>>><<>><<<>><>><<<><<<<>>>><>>><><<<<>>>><<>><>>><<<><<<>><<<<>>>><<<<>>><<<<>>>><<<<>>>><><>>>><<<<>>><><<<><<<<>><<<<>>>><<<<>><<<<>>><>>>><<<><<<<>><<>><<><><<>>>><<<<><><<>>><>>><<<<>>><<>>>><<><<>><<<<>>>><>>>><<<><<>>>><<<>><<<>>>><>><<>>>><<>>>><<<>>>><>>>><<>>><<>>>><><><<<>><<><><<<<>>><>>>><<><<>>><<<>>><<<>>>><<<>>>><<><>><<>><>>>><<<><<><<<<>>><<<>>>><<<<><<>>>><<<<>>>><<<><<<><<<><>>><<>><>>>><>>><<<>>>><<<>>>><>>><<<><<<<>>>><<>>>><><>>>><<<<><<>>><<<>>><>>>><>><<<>>><<><<>><<<<>>>><<>><<><>><<<>><><<<<><<<>><<<<><>>><<<<>>>><<<><<<<><<<>>><<<>>>><<<>>><<>>>><<<<>>>><<<>><<>>><<<<>>><<<<>><<><>><<>>><>>><<>><<>>>><<>>>><<>>><<<>>><><<>><<<>><<<><<>>>><<><<<>>>><>><<<>>>><<<>>>><<>>><<<<>>>><<>>><<<>>><<<<><<>>>><><>>>><<>>>><<<>>>><<<><<<<>>><<<<>><<><<<>><>>><<>>><<<>>>><<>>>><<<<>>>><<<<>>>><<<<>><<<>>>><<<>>>><<<>><<>>>><<<<><<<<>><<<>>>><<>>><<<<><<>>><<>>>><<<><>>><<<>>><>>><<><<<><<>>><<><>>>><<>>>><<><<><<<><<<>>><<<<>>><<><<<>><<<<><<<<>>>><<<>>><><<<<>><<<<>>>><<<>><<>>>><<<>>><>>><>><<><<>>><<><>><<>>><><<<<>>><<<>>><>>><<<<>><<<<><><<<>>>><>>><><<<>>><<<>>><<><<<>>>><>>>><<<>>>><>>>><<<<>>>><<<>><<<>>><<>><<<>>>><<<<><>><<<>>><<>><<<<>>>><<><><<<>><><><>>>><<<>>><<<>>><<<<>>>><<<<><<><<<<>><<<<>>>><<<<>>><>><<>><>>><<>><<><<>>>><<>><<>><<>><>>>><>><<<<>><<><<<<>>><<<>><<<>>>><<<>>>><<<>><>>><<<>>><>>>><<<<><>><<>>>><>>>><<<>>>><<<<>>><<<>>><>>>><<>>><<<>>>><<>><<<<>>>><>>>><<<>><<<<><<<><<<>>><<<>>>><<<><<<>>><<<<>>>><<><<>><<>><<<<>><>>><<<<><><<>>>><<<<>>><<<<>>>><>>><<<<>>>><<>><>>><<<<>>>><<<><<<><<<<>>>><>>>><<<<>>>><<<<>><<<>><<>>>><>>>><<>>>><<><<<><<><>><<<>>><<><<>><<<<>><<<>>>><<<>>>><<>>>><<>>><<>><<<<>><>>>><>><<<<>>>><<>>><>>><<<>>><<<<>>><<<<>>>><<<>>><<<>><<<<>>>><<<>>><<<<><<><<><<<>><<<<><>>>><<<>><>>>><<<><<<<>><<<><<>>><<<<>>>><<<><<<>><>><>>>><<>><<<<><<<>><<>>><<>>>><<>>><>>>><<<<>>>><<><<<<><<>><<>><>><<<<><>>><<>>>><<><<>>>><><<<><>>><<<><<<<><<<>>>><<<<>>>><<<<>><<<<>>>><<<<><<>><<<>><>><<<<>><><<<<>>><><<<>>>><<>><<<<>><<<>>><><<<>>>><<<<>>>><>>><<<>><<<>>><<<<>>><<>>>><>>><>>>><<<><<<>>><<<>>>><<<<>>>><<><<<<>>><<<>>>><>>><>><<<>>>><>>>><<><>><<<<><<><<<<><<<>>>><>>><>><>>>><<<>>><<<>><<<<><<>>><<<<>>>><<<>>>><><<<<>>><<<<>>><<><<<<>><><<<>><<>><<<<>>><<<>>>><>><<>>>><>><>>><<<>><<<><<<><<<>><>>><<><<>>>><<<>>><>>>><<><<<<>><<<<><<<<>><<>><>>>><><<>>>><>><>><<<<>><>>>><<<<>><<<>>><<>><<<>>>><<<><<<>><>><<<<><<><<>>><<<<>><<<<>><<<<>>>><<<<>>>><<<<>>>><<>>>><<>>>><<>>><<<<><<<<>>><>><><<>><<>><<<<>>><<<><<>>>><<<>><<>>><<<<><<<<>>><<<>><<<<>>>><<<<>><<>>>><<<<>>>><<>>>><<>>>><>>>><<>><>>><<<<>>><<><<>><<<>>>><<<>><<<<>><<<>><<<<>>>><<<<>>><<<<>>>><<<<>>>><<<>><<>><<>><<<>>><<<>>>><><>>>><<<<>>><>><<<<>><<<>><<<<>><>><<<<>>>><>><<>>><<<>>>><<<>><<<<>>><<<<>>>><<<>>><<<<>>><<<<>>><<>>><<<<><<>>>><>><>>><<<><<<><<<<>>>><<>><<<><<<<>><<>>>><<>><<<<>>><<<<>><<>><<>>><>>><<><<<><<<>>>><><<<>><<>><><<<>><<<<>>><<<>><<<<>><<>>>><>><<<>>>><><<<<>>>><<<<>>>><<<>>>><<<<><<<>>><<>><<>>><<>><<<>>><<<>>><<><<<>>>><<<<>><<<>><<<><<>>>><>>>><<<><<>>>><>><<<<>>>><>>>><>><>>>><<<<>><<<>><<>>>><<<<>>><<<<>><<<<>>>>";
    let shapes: [Vec<(usize, usize)>; 5] = [
        Vec::from([(0, 0), (1, 0), (2, 0), (3, 0)]),
        Vec::from([(1, 0), (0, 1), (1, 1), (2, 1), (1, 2)]),
        Vec::from([(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)]),
        Vec::from([(0, 0), (0, 1), (0, 2), (0, 3)]),
        Vec::from([(0, 0), (0, 1), (1, 0), (1, 1)]),
    ];

    let mut grid = HashSet::new();
    let mut height: usize = 0;
    let mut instruction_idx: usize = 0;
    let mut shape_idx: usize = 0;
    let mut it: usize = 0;
    let mut history: HashMap<(usize, usize), Vec<(usize, usize)>> = HashMap::new();

    // 1595988538691

    loop {
        it += 1;
        if it == 1000000000001 {
            dbg!(height);
            todo!();
        }

        let key = (shape_idx, instruction_idx);
        let value = (it, height);

        // if it > 4500 && (it - 4500) % 1745 == 0 {
        //     let (prev_it, prev_height) = history.get(&key).unwrap().last().unwrap();
        //     println!("{} -> {} (diff: {}); {} -> {} (diff: {})", prev_it, it, it - prev_it, prev_height, height, height - prev_height);
        //     println!("{:?}", (0..WIDTH).map(|w| {
        //         let mut blaat = grid.iter().filter(|(x, _)| *x == w).map(|(_, y)| *y).collect::<Vec<usize>>();
        //         blaat.sort();
        //         blaat.iter().rev().take(5).map(|v| height - v).collect::<Vec<_>>()
        //     }).collect::<Vec<_>>());
        // }

        // if shape_idx == 3 && instruction_idx == 8755 && it > 1700 {
        //     let (prev_it, prev_height) = history.get(&key).unwrap().last().unwrap();
        //     println!("{} -> {} (diff: {}); {} -> {} (diff: {}); remainder: {}", prev_it, it, it - prev_it, prev_height, height, height - prev_height, (1_000_000_000_000 - prev_it) % (it - prev_it));
        //     println!("{:?}", (0..WIDTH).map(|w| {
        //         let mut blaat = grid.iter().filter(|(x, _)| *x == w).map(|(_, y)| *y).collect::<Vec<usize>>();
        //         blaat.sort();
        //         blaat.iter().rev().take(15).map(|v| height - v).collect::<Vec<_>>()
        //     }).collect::<Vec<_>>());
        // }

        if !history.contains_key(&key) {
            let mut tracker = Vec::new();
            tracker.push(value);
            history.insert(key, tracker);
        } else if it < 100_000 {
            let tracker = history.get_mut(&key).unwrap();
            tracker.push(value);

            if tracker.len() == 3 {
                let (base_it, base_height) = tracker[1];
                let (next_it, next_height) = tracker[2];
                let it_step = next_it - base_it;
                let a = (1000000000000 - base_it) / it_step;
                let b = (1000000000000 - base_it) % it_step;

                // Fast forward
                it = base_it + a * it_step;
                let new_height = base_height + a * (next_height - base_height);
                let height_diff = new_height - height;
                height = new_height;

                println!("{}, {}, {}, {}, {}, {}", base_it, next_it, it_step, base_height, height_diff, b);

                let new_grid = HashSet::from_iter(grid.iter().map(|(x, y)| (*x, *y + height_diff)));
                grid = new_grid;
            }
        }

        let mut x = 2;
        let mut y = height + 3;
        let shape = &shapes[shape_idx];
        let width = shape.iter().map(|(x, _)| x).max().unwrap() + 1;

        // draw(&grid, Some(&shape), Some((x, y)));
        // println!();

        loop {
            // Move sideways.
            let instruction = instructions.chars().nth(instruction_idx).unwrap();
            let c1 = match instruction {
                '>' if x + width < WIDTH => (x + 1, y),
                '<' if x > 0 => (x - 1, y),
                _ => (x, y)
            };
            if !collides(&grid, shape, c1) {
                (x, y) = c1;
            }

            // Prepare the next instruction.
            instruction_idx = (instruction_idx + 1) % instructions.len();

            // Move down.
            if y > 0 && !collides(&grid, shape, (x, y - 1)) {
                y -= 1;
            } else {
                let cs = coords(shape, (x, y));
                for c in &cs {
                    grid.insert(*c);
                }
                height = max(cs.into_iter().map(|(_, y)| y).max().unwrap() + 1, height);

                // Move to the next shape
                shape_idx = (shape_idx + 1) % shapes.len();
                break;
            }
        }
    }

    dbg!(height);
}


fn main() {
    aap();
}